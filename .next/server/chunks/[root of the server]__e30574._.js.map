{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/genieclimfrance/Desktop/devweb/GenieSolaire/src/app/api/send/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport sgMail from \"@sendgrid/mail\";\n\nconst apiKey = process.env.SENDGRID_API_KEY;\nif (!apiKey) {\n  console.warn(\"Clé API SendGrid manquante\");\n}\n\n// Initialiser SendGrid seulement si la clé est présente\nif (apiKey) {\n  sgMail.setApiKey(apiKey);\n}\n\ninterface SendGridErrorResponse {\n  message: string;\n  code: number;\n  response?: {\n    body: unknown;\n  };\n}\n\nexport async function POST(request: Request) {\n  if (!apiKey) {\n    console.error(\"Clé API SendGrid manquante\");\n    return NextResponse.json(\n      { message: \"Configuration du serveur d'emails manquante\" },\n      { status: 500 }\n    );\n  }\n\n  try {\n    const body = await request.json();\n    console.log(\"Corps de la requête:\", body);\n    const { nom, email, telephone, message, adresse, codePostal } = body;\n\n    if (!nom || !email || !message) {\n      return NextResponse.json(\n        { message: \"Champs obligatoires manquants\" },\n        { status: 400 }\n      );\n    }\n\n    const msg = {\n      to: process.env.RECIPIENT_EMAIL || \"contact@geniesolairefrance.fr\",\n      from: {\n        email: process.env.SENDER_EMAIL || \"contact@geniesolairefrance.fr\",\n        name: \"GENIE SOLAIRE FRANCE\",\n      },\n      subject: `Nouveau message de ${nom} depuis le formulaire de contact`,\n      text: `\n        Nouveau message de: ${nom}\n        Email: ${email}\n        Téléphone: ${telephone || \"Non renseigné\"}\n        Adresse: ${adresse || \"Non renseignée\"}\n        Code Postal: ${codePostal || \"Non renseigné\"}\n        Message: ${message}\n      `,\n      html: `\n        <h2>Nouveau message de contact</h2>\n        <p><strong>Nom:</strong> ${nom}</p>\n        <p><strong>Email:</strong> ${email}</p>\n        <p><strong>Téléphone:</strong> ${telephone || \"Non renseigné\"}</p>\n        <p><strong>Code Postal:</strong> ${codePostal || \"Non renseigné\"}</p>\n        <p><strong>Message:</strong> ${message}</p>\n      `,\n    };\n\n    try {\n      console.log(\"Tentative d'envoi avec configuration:\", {\n        to: msg.to,\n        from: msg.from.email,\n        subject: msg.subject,\n      });\n      await sgMail.send(msg);\n      return NextResponse.json({ message: \"Email envoyé avec succès\" });\n    } catch (sendError: unknown) {\n      console.error(\"Erreur SendGrid détaillée:\", {\n        error: sendError,\n        response: (sendError as any).response?.body,\n      });\n      if (\n        sendError &&\n        typeof sendError === \"object\" &&\n        \"message\" in sendError &&\n        \"code\" in sendError\n      ) {\n        const typedError = sendError as SendGridErrorResponse;\n        return NextResponse.json(\n          {\n            message: \"Erreur lors de l'envoi de l'email\",\n            details: `SendGrid: ${typedError.message}`,\n          },\n          { status: typedError.code || 500 }\n        );\n      }\n      return NextResponse.json(\n        { message: \"Erreur lors de l'envoi de l'email\" },\n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    console.error(\"Erreur générale:\", error);\n    return NextResponse.json(\n      { message: \"Erreur lors du traitement de la requête\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,gBAAgB;AAC3C,IAAI,CAAC,QAAQ;IACX,QAAQ,IAAI,CAAC;AACf;AAEA,wDAAwD;AACxD,IAAI,QAAQ;IACV,6IAAA,CAAA,UAAM,CAAC,SAAS,CAAC;AACnB;AAUO,eAAe,KAAK,OAAgB;IACzC,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA8C,GACzD;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,wBAAwB;QACpC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG;QAEhE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAgC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,MAAM;YACV,IAAI,QAAQ,GAAG,CAAC,eAAe,IAAI;YACnC,MAAM;gBACJ,OAAO,QAAQ,GAAG,CAAC,YAAY,IAAI;gBACnC,MAAM;YACR;YACA,SAAS,CAAC,mBAAmB,EAAE,IAAI,gCAAgC,CAAC;YACpE,MAAM,CAAC;4BACe,EAAE,IAAI;eACnB,EAAE,MAAM;mBACJ,EAAE,aAAa,gBAAgB;iBACjC,EAAE,WAAW,iBAAiB;qBAC1B,EAAE,cAAc,gBAAgB;iBACpC,EAAE,QAAQ;MACrB,CAAC;YACD,MAAM,CAAC;;iCAEoB,EAAE,IAAI;mCACJ,EAAE,MAAM;uCACJ,EAAE,aAAa,gBAAgB;yCAC7B,EAAE,cAAc,gBAAgB;qCACpC,EAAE,QAAQ;MACzC,CAAC;QACH;QAEA,IAAI;YACF,QAAQ,GAAG,CAAC,yCAAyC;gBACnD,IAAI,IAAI,EAAE;gBACV,MAAM,IAAI,IAAI,CAAC,KAAK;gBACpB,SAAS,IAAI,OAAO;YACtB;YACA,MAAM,6IAAA,CAAA,UAAM,CAAC,IAAI,CAAC;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2B;QACjE,EAAE,OAAO,WAAoB;YAC3B,QAAQ,KAAK,CAAC,8BAA8B;gBAC1C,OAAO;gBACP,UAAU,AAAC,UAAkB,QAAQ,EAAE;YACzC;YACA,IACE,aACA,OAAO,cAAc,YACrB,aAAa,aACb,UAAU,WACV;gBACA,MAAM,aAAa;gBACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBACE,SAAS;oBACT,SAAS,CAAC,UAAU,EAAE,WAAW,OAAO,EAAE;gBAC5C,GACA;oBAAE,QAAQ,WAAW,IAAI,IAAI;gBAAI;YAErC;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAoC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA0C,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}